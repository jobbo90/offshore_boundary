begin_coords <- data.frame(lon = as.numeric(all_digits[1]),
lat = as.numeric(all_digits[2]))
end_coords <- data.frame(lon = as.numeric(all_digits[3]),
lat = as.numeric(all_digits[4]))
x <- as.matrix(rbind(begin_coords, end_coords))
lines[[n]] <- Lines(list(Line(x)), ID = n)  # create line feature
# only return observations if coastDist >= 0 and if coordinates
test1transect <- subset(csv,csv[,col_of_interest(csv, 'originX$')]== uniqueX[n]
& csv[,col_of_interest(csv, 'coastDist$')] >= 0 )
test1transect
test1transect[,col_of_interest(csv, 'coastDist$')]
length(uniqueX)
#n<-1
transectCounter <- 1
df_coastDist[transectCounter,] <- test1transect[,col_of_interest(csv, 'coastDist$')]
df_coastDist <- data.frame(10,4)
View(df_coastDist)
df_coastDist <- data.frame()
df_coastDist <- rbind(df_coastDist, test1transect[,col_of_interest(csv, 'coastDist$')])
View(df_coastDist)
for (n in 1:length(uniqueX)){
#n<-1
# Coordinates of transects
coords <- qdapRegex::ex_between(as.character(geo[n]), ":[", "]}")[[1]]
all_digits <- regmatches(coords, gregexpr("[-[:digit:].]+", coords))[[1]]
begin_coords <- data.frame(lon = as.numeric(all_digits[1]),
lat = as.numeric(all_digits[2]))
end_coords <- data.frame(lon = as.numeric(all_digits[3]),
lat = as.numeric(all_digits[4]))
x <- as.matrix(rbind(begin_coords, end_coords))
lines[[n]] <- Lines(list(Line(x)), ID = n)  # create line feature
# only return observations if coastDist >= 0 and if coordinates
test1transect <- subset(csv,csv[,col_of_interest(csv, 'originX$')]== uniqueX[n]
& csv[,col_of_interest(csv, 'coastDist$')] >= 0 )
df_coastDist <- rbind(df_coastDist, test1transect[,col_of_interest(csv, 'coastDist$')])
# coordiates of coastline points
coords <- data.frame(x = as.numeric(test1transect[,col_of_interest(csv, 'coastX$')]),
y = as.numeric(test1transect[,col_of_interest(csv, 'coastY$')]))
allPoints <- rbind(allPoints, coords)
}
View(df_coastDist)
warning()
warnings()
n<-3
lines <- vector('list', length(uniqueX))
allPoints <- vector('list', length(csv))
df_coastDist <- data.frame()
# Coordinates of transects
coords <- qdapRegex::ex_between(as.character(geo[n]), ":[", "]}")[[1]]
all_digits <- regmatches(coords, gregexpr("[-[:digit:].]+", coords))[[1]]
begin_coords <- data.frame(lon = as.numeric(all_digits[1]),
lat = as.numeric(all_digits[2]))
end_coords <- data.frame(lon = as.numeric(all_digits[3]),
lat = as.numeric(all_digits[4]))
x <- as.matrix(rbind(begin_coords, end_coords))
lines[[n]] <- Lines(list(Line(x)), ID = n)  # create line feature
View(lines)
# only return observations if coastDist >= 0 and if coordinates
test1transect <- subset(csv,csv[,col_of_interest(csv, 'originX$')]== uniqueX[n]
& csv[,col_of_interest(csv, 'coastDist$')] >= 0 )
test1transect
df_coastDist <- rbind(df_coastDist, test1transect[,col_of_interest(csv, 'coastDist$')])
View(df_coastDist)
mapview(lines_sf,xcol = "x", ycol = "y", crs = 4326, popup = popupTable(lines_sf))
points_sf <- st_as_sf(points)
mapview(lines_sf,xcol = "x", ycol = "y", crs = 4326, popup = popupTable(lines_sf)) + mapview(points_sf)
poppendorf
mapview(lines_sf,xcol = "x", ycol = "y", popup = popupTable(lines_sf)) + mapview(points_sf)
test1transect
df = data.frame(matrix(vector(), 0, 3,
dimnames=list(c(), c("Date", "File", "User"))),
stringsAsFactors=F)
df
View(df)
c(uniqueDates)
df = data.frame(matrix(vector(), 0, size(uniqueDates),
dimnames=list(c(), c(uniqueDates))),
stringsAsFactors=F)
size(uniqueDates)
length(uniqueDates)
df = data.frame(matrix(vector(), 0, length(uniqueDates),
dimnames=list(c(), c(uniqueDates))),
stringsAsFactors=F)
View(df)
df_coastDist = data.frame(matrix(vector(), 0, length(uniqueDates),
dimnames=list(c(), c(uniqueDates))),
stringsAsFactors=F)
geo[n]
geo
test1transect
list(c(), c(uniqueDates))
df_coastDist = data.frame(matrix(vector(), 0, length(uniqueDates),
dimnames=list(
c(uniqueDates))),
stringsAsFactors=F)
df_coastDist = data.frame(matrix(vector(), 0, length(uniqueDates),
dimnames=list(c(), c(uniqueDates))),
stringsAsFactors=F)
df_coastDist
View(df_coastDist)
matrix(vector(), 0, length(uniqueDates)
vector()
vector()
test1transect[,col_of_interest(csv, 'coastDist$')]
test1transect[,col_of_interest(csv, 'DATE_ACQUIRED$')]
col_of_interest(csv, 'coastDist$')
col_of_interest(csv, 'DATE_ACQUIRED$')
test1transect[,col_of_interest(csv, 'coastDist$') & 3]
test1transect[,col_of_interest(csv, 'coastDist$') && 3]
col_of_interest(csv, 'coastDist$')
test <- test1transect %>% select(3,6)
library(dplyr)
test <- test1transect %>% select(3,6)
c(test1transect[,col_of_interest(csv, 'coastDist$'), 3)
c(test1transect[,col_of_interest(csv, 'coastDist$'), 3)
c(col_of_interest(csv, 'coastDist$'), 3)
test1transect[,c(col_of_interest(csv, 'coastDist$'), 3)
]
sort(c(col_of_interest(csv, 'coastDist$'), 3))
df_coastDist <- rbind(df_coastDist, test1transect[,
sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))
])
df_coastDist
df_coastDist <- rbind(., test1transect[,
sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))
])
df_coastDist
subset <- sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))
subset
subset <- test1transect[,sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))]
subset
df_coastDist %in% subset
df_coastDist %in% subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')]
subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')]
colnames(df_coastDist)
df_coastDist = data.frame(matrix(vector(), 0, length(uniqueDates),
dimnames=list(c(), c(uniqueDates))),
stringsAsFactors=F)
df_coastDist %in% subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')]
subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')]
df_coastDist
df_coastDist
uniqueDates
c(uniqueDates)
df_coastDist = data.frame(matrix(vector(), 0, length(uniqueDates),
dimnames=list(c(), c(uniqueDates))),
stringsAsFactors=T)
df_coastDist
c(uniqueDates)
list(c(), c(uniqueDates))
?data.frame
df_coastDist = data.frame(matrix(vector(), 0, length(uniqueDates),
)
df_coastDist
df_coastDist = data.frame(matrix(vector(), 0, length(uniqueDates),
stringsAsFactors=F))
df_coastDist = data.frame(matrix(vector(), 0, length(uniqueDates)),
stringsAsFactors=F)
df_coastDist
uniqueDates
c('id', uniqueDates)
colnames(df_coastDist) <- c('id', uniqueDates)
colnames(df_coastDist) <- c(uniqueDates)
df_coastDist
df_coastDist %in% subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')]
colnames(df_coastDist )
colnames(df_coastDist) %in% subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')]
df_coastDist[,mathcingDates] <-
#
#
# coordiates of coastline points
coords <- data.frame(x = as.numeric(test1transect[,col_of_interest(csv, 'coastX$')]),
y = as.numeric(test1transect[,col_of_interest(csv, 'coastY$')]))
mathcingDates <- colnames(df_coastDist) %in% subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')]
df_coastDist[,mathcingDates] <-
#
#
# coordiates of coastline points
coords <- data.frame(x = as.numeric(test1transect[,col_of_interest(csv, 'coastX$')]),
y = as.numeric(test1transect[,col_of_interest(csv, 'coastY$')]))
subset
subset[,col_of_interest(subset, 'coastDist$')]
df_coastDist[,mathcingDates] <- subset[,col_of_interest(subset, 'coastDist$')]
df_coastDist
test1transect
subset
mathcingDates
df_coastDist = data.frame(matrix(NA, 0, length(uniqueDates)),
stringsAsFactors=F)
df_coastDist
pos
length(pos)
df_coastDist = data.frame(matrix(NA, length(pos), length(uniqueDates)),
stringsAsFactors=F)
df_coastDist
mathcingDates <- colnames(df_coastDist) %in% subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')]
mathcingDates
subset[,col_of_interest(subset, 'coastDist$')]
lines_sf
df_coastDist = data.frame(matrix(NA, length(pos), length(uniqueDates)),
stringsAsFactors=F)
df_coastDist
length(uniqueX)
df_coastDist[n,mathcingDates] <- subset[,col_of_interest(subset, 'coastDist$')]
df_coastDist[n,mathcingDates]
df_coastDist[n,mathcingDates]
df_coastDist[n,]
mathcingDates
subset[,col_of_interest(subset, 'coastDist$')]
df_coastDist[,mathcingDates]
colnames(df_coastDist) %in% subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')]
colnames(df_coastDist) <- c(uniqueDates)
colnames(df_coastDist) %in% subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')]
any(colnames(df_coastDist) %in% subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')])
mathcingDates <- colnames(df_coastDist) %in% subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')]
mathcingDates
match(colnames(df_coastDist), subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')])
mathcingDates <- match(colnames(df_coastDist), subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')])
mathcingDates
df_coastDist[,mathcingDates] <- subset[,col_of_interest(subset, 'coastDist$')]
mathcingDates
df_coastDist[,c(mathcingDates)]
c(mathcingDates)
?c
c(mathcingDates)
c(mathcingDates)
?match
mathcingDates <- match(colnames(df_coastDist), subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')], nomatch = 0)
mathcingDates
c(mathcingDates)
df_coastDist[,c(mathcingDates)] <- subset[,col_of_interest(subset, 'coastDist$')]
mathcingDates <- match(colnames(df_coastDist), subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')], nomatch = 0) >0
mathcingDates
mathcingDates <- match(colnames(df_coastDist), subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')])
mathcingDates
na.exclude(c(mathcingDates))
na.exclude(c(mathcingDates))[1]
na.omit(c(mathcingDates))
!is.na(c(mathcingDates))
?complete.cases
complete.cases(c(mathcingDates))
na.omit(c(mathcingDates))
na.omit(cathcingDates)
mathcingDates
na.omit(mathcingDates)
mathcingDates[!is.na(c(mathcingDates))]
df_coastDist[,mathcingDates[!is.na(c(mathcingDates))]]
df_coastDist[n,mathcingDates[!is.na(c(mathcingDates))]] <- subset[,col_of_interest(subset, 'coastDist$')]
View(df_coastDist)
colnames(df_coastDist) <- c(uniqueDates)
for (n in 1:length(uniqueX)){
#n<-3
# Coordinates of transects
coords <- qdapRegex::ex_between(as.character(geo[n]), ":[", "]}")[[1]]
all_digits <- regmatches(coords, gregexpr("[-[:digit:].]+", coords))[[1]]
begin_coords <- data.frame(lon = as.numeric(all_digits[1]),
lat = as.numeric(all_digits[2]))
end_coords <- data.frame(lon = as.numeric(all_digits[3]),
lat = as.numeric(all_digits[4]))
x <- as.matrix(rbind(begin_coords, end_coords))
lines[[n]] <- Lines(list(Line(x)), ID = n)  # create line feature
# only return observations if coastDist >= 0 and if coordinates
test1transect <- subset(csv,csv[,col_of_interest(csv, 'originX$')]== uniqueX[n]
& csv[,col_of_interest(csv, 'coastDist$')] >= 0 )
subset <- test1transect[,sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))]
mathcingDates <- match(colnames(df_coastDist), subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')])
df_coastDist[n,mathcingDates[!is.na(c(mathcingDates))]] <- subset[,col_of_interest(subset, 'coastDist$')]
#
#
# coordiates of coastline points
coords <- data.frame(x = as.numeric(test1transect[,col_of_interest(csv, 'coastX$')]),
y = as.numeric(test1transect[,col_of_interest(csv, 'coastY$')]))
allPoints <- rbind(allPoints, coords)
}
n
# Coordinates of transects
coords <- qdapRegex::ex_between(as.character(geo[n]), ":[", "]}")[[1]]
all_digits <- regmatches(coords, gregexpr("[-[:digit:].]+", coords))[[1]]
begin_coords <- data.frame(lon = as.numeric(all_digits[1]),
lat = as.numeric(all_digits[2]))
end_coords <- data.frame(lon = as.numeric(all_digits[3]),
lat = as.numeric(all_digits[4]))
x <- as.matrix(rbind(begin_coords, end_coords))
lines[[n]] <- Lines(list(Line(x)), ID = n)  # create line feature
# only return observations if coastDist >= 0 and if coordinates
test1transect <- subset(csv,csv[,col_of_interest(csv, 'originX$')]== uniqueX[n]
& csv[,col_of_interest(csv, 'coastDist$')] >= 0 )
subset <- test1transect[,sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))]
mathcingDates <- match(colnames(df_coastDist), subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')])
subset
colnames(df_coastDist)
subset[ ,col_of_interest(subset, 'DATE_ACQUIRED$')
]
subset
subset
col_of_interest(subset, 'DATE_ACQUIRED$')
col_of_interest(subset, 'DATE_ACQUIRED')
subset
subset[ ,col_of_interest(subset, 'DATE_ACQUIRED')
subset[ ,col_of_interest(subset, 'DATE_ACQUIRED')]
match(colnames(df_coastDist), subset[ ,col_of_interest(subset, 'DATE_ACQUIRED')])
subset
n
n<-101
# Coordinates of transects
coords <- qdapRegex::ex_between(as.character(geo[n]), ":[", "]}")[[1]]
all_digits <- regmatches(coords, gregexpr("[-[:digit:].]+", coords))[[1]]
begin_coords <- data.frame(lon = as.numeric(all_digits[1]),
lat = as.numeric(all_digits[2]))
end_coords <- data.frame(lon = as.numeric(all_digits[3]),
lat = as.numeric(all_digits[4]))
x <- as.matrix(rbind(begin_coords, end_coords))
lines[[n]] <- Lines(list(Line(x)), ID = n)  # create line feature
# only return observations if coastDist >= 0 and if coordinates
test1transect <- subset(csv,csv[,col_of_interest(csv, 'originX$')]== uniqueX[n]
& csv[,col_of_interest(csv, 'coastDist$')] >= 0 )
subset <- test1transect[,sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))]
subset
col_of_interest(subset, 'DATE_ACQUIRED')
col_of_interest(subset, 'DATE_ACQUIRED')
subset[ ,col_of_interest(subset, 'DATE_ACQUIRED')]
mathcingDates <- match(colnames(df_coastDist), subset[ ,col_of_interest(subset, 'DATE_ACQUIRED')])
mathcingDates
View(df_coastDist)
subset <- test1transect[,sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))]
n<-103
# Coordinates of transects
coords <- qdapRegex::ex_between(as.character(geo[n]), ":[", "]}")[[1]]
all_digits <- regmatches(coords, gregexpr("[-[:digit:].]+", coords))[[1]]
begin_coords <- data.frame(lon = as.numeric(all_digits[1]),
lat = as.numeric(all_digits[2]))
end_coords <- data.frame(lon = as.numeric(all_digits[3]),
lat = as.numeric(all_digits[4]))
x <- as.matrix(rbind(begin_coords, end_coords))
lines[[n]] <- Lines(list(Line(x)), ID = n)  # create line feature
# only return observations if coastDist >= 0 and if coordinates
test1transect <- subset(csv,csv[,col_of_interest(csv, 'originX$')]== uniqueX[n]
& csv[,col_of_interest(csv, 'coastDist$')] >= 0 )
subset <- test1transect[,sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))]
subset
mathcingDates <- match(colnames(df_coastDist), subset[ ,col_of_interest(subset, 'DATE_ACQUIRED')])
mathcingDates
df_coastDist[n,mathcingDates[!is.na(c(mathcingDates))]] <- subset[,col_of_interest(subset, 'coastDist$')]
n<-102
# Coordinates of transects
coords <- qdapRegex::ex_between(as.character(geo[n]), ":[", "]}")[[1]]
all_digits <- regmatches(coords, gregexpr("[-[:digit:].]+", coords))[[1]]
begin_coords <- data.frame(lon = as.numeric(all_digits[1]),
lat = as.numeric(all_digits[2]))
end_coords <- data.frame(lon = as.numeric(all_digits[3]),
lat = as.numeric(all_digits[4]))
x <- as.matrix(rbind(begin_coords, end_coords))
lines[[n]] <- Lines(list(Line(x)), ID = n)  # create line feature
# only return observations if coastDist >= 0 and if coordinates
test1transect <- subset(csv,csv[,col_of_interest(csv, 'originX$')]== uniqueX[n]
& csv[,col_of_interest(csv, 'coastDist$')] >= 0 )
subset <- test1transect[,sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))]
subset
subset[,1]
dim(subset)
subset
n<-103
# Coordinates of transects
coords <- qdapRegex::ex_between(as.character(geo[n]), ":[", "]}")[[1]]
all_digits <- regmatches(coords, gregexpr("[-[:digit:].]+", coords))[[1]]
begin_coords <- data.frame(lon = as.numeric(all_digits[1]),
lat = as.numeric(all_digits[2]))
end_coords <- data.frame(lon = as.numeric(all_digits[3]),
lat = as.numeric(all_digits[4]))
x <- as.matrix(rbind(begin_coords, end_coords))
lines[[n]] <- Lines(list(Line(x)), ID = n)  # create line feature
# only return observations if coastDist >= 0 and if coordinates
test1transect <- subset(csv,csv[,col_of_interest(csv, 'originX$')]== uniqueX[n]
& csv[,col_of_interest(csv, 'coastDist$')] >= 0 )
subset <- test1transect[,sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))]
subset
typeof(subset)
dim(date_acquired)
dim(subset)
col_of_interest(csv, 'DATE_ACQUIRED$'))
col_of_interest(csv, 'DATE_ACQUIRED$')
col_of_interest(subset, 'DATE_ACQUIRED')
n<-102
# Coordinates of transects
coords <- qdapRegex::ex_between(as.character(geo[n]), ":[", "]}")[[1]]
all_digits <- regmatches(coords, gregexpr("[-[:digit:].]+", coords))[[1]]
begin_coords <- data.frame(lon = as.numeric(all_digits[1]),
lat = as.numeric(all_digits[2]))
end_coords <- data.frame(lon = as.numeric(all_digits[3]),
lat = as.numeric(all_digits[4]))
x <- as.matrix(rbind(begin_coords, end_coords))
lines[[n]] <- Lines(list(Line(x)), ID = n)  # create line feature
# only return observations if coastDist >= 0 and if coordinates
test1transect <- subset(csv,csv[,col_of_interest(csv, 'originX$')]== uniqueX[n]
& csv[,col_of_interest(csv, 'coastDist$')] >= 0 )
subset <- test1transect[,sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))]
subset <- test1transect[,sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))]
subset
nrow(subset)
print('true')
if(nrow(subset) == NULL){print('true')}
if(nrow(subset) = NULL){print('true')}
is.null(nrow(subset))
if(is.null(nrow(subset))){print('true')}
rep(NA, length(uniqueDates))
df_coastDist = data.frame(matrix(NA, length(pos), length(uniqueDates)),
stringsAsFactors=F)
colnames(df_coastDist) <- c(uniqueDates)
for (n in 1:length(uniqueX)){
#n<-102
# Coordinates of transects
coords <- qdapRegex::ex_between(as.character(geo[n]), ":[", "]}")[[1]]
all_digits <- regmatches(coords, gregexpr("[-[:digit:].]+", coords))[[1]]
begin_coords <- data.frame(lon = as.numeric(all_digits[1]),
lat = as.numeric(all_digits[2]))
end_coords <- data.frame(lon = as.numeric(all_digits[3]),
lat = as.numeric(all_digits[4]))
x <- as.matrix(rbind(begin_coords, end_coords))
lines[[n]] <- Lines(list(Line(x)), ID = n)  # create line feature
# only return observations if coastDist >= 0 and if coordinates
test1transect <- subset(csv,csv[,col_of_interest(csv, 'originX$')]== uniqueX[n]
& csv[,col_of_interest(csv, 'coastDist$')] >= 0 )
subset <- test1transect[,sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))]
if(is.null(nrow(subset))){print('true')
df_coastDist[n,] <- rep(NA, length(uniqueDates))
} else {
mathcingDates <- match(colnames(df_coastDist), subset[ ,col_of_interest(subset, 'DATE_ACQUIRED')])
df_coastDist[n,mathcingDates[!is.na(c(mathcingDates))]] <- subset[,col_of_interest(subset, 'coastDist$')]
}
#
#
# coordiates of coastline points
coords <- data.frame(x = as.numeric(test1transect[,col_of_interest(csv, 'coastX$')]),
y = as.numeric(test1transect[,col_of_interest(csv, 'coastY$')]))
allPoints <- rbind(allPoints, coords)
}
lines_sf
dim(df_coastDist)
test1transect
n<-102
# Coordinates of transects
coords <- qdapRegex::ex_between(as.character(geo[n]), ":[", "]}")[[1]]
all_digits <- regmatches(coords, gregexpr("[-[:digit:].]+", coords))[[1]]
begin_coords <- data.frame(lon = as.numeric(all_digits[1]),
lat = as.numeric(all_digits[2]))
end_coords <- data.frame(lon = as.numeric(all_digits[3]),
lat = as.numeric(all_digits[4]))
x <- as.matrix(rbind(begin_coords, end_coords))
lines[[n]] <- Lines(list(Line(x)), ID = n)  # create line feature
# only return observations if coastDist >= 0 and if coordinates
test1transect <- subset(csv,csv[,col_of_interest(csv, 'originX$')]== uniqueX[n]
& csv[,col_of_interest(csv, 'coastDist$')] >= 0 )
test1transect
length(uniqueX)
length(pos)
length(geo)
length(unqiueY)
length(uniqueY)
df_coastDist = data.frame(matrix(NA, length(uniqueX), length(uniqueDates)),
stringsAsFactors=F)
colnames(df_coastDist) <- c(uniqueDates)
for (n in 1:length(uniqueX)){
#n<-102
# Coordinates of transects
coords <- qdapRegex::ex_between(as.character(geo[n]), ":[", "]}")[[1]]
all_digits <- regmatches(coords, gregexpr("[-[:digit:].]+", coords))[[1]]
begin_coords <- data.frame(lon = as.numeric(all_digits[1]),
lat = as.numeric(all_digits[2]))
end_coords <- data.frame(lon = as.numeric(all_digits[3]),
lat = as.numeric(all_digits[4]))
x <- as.matrix(rbind(begin_coords, end_coords))
lines[[n]] <- Lines(list(Line(x)), ID = n)  # create line feature
# only return observations if coastDist >= 0 and if coordinates
test1transect <- subset(csv,csv[,col_of_interest(csv, 'originX$')]== uniqueX[n]
& csv[,col_of_interest(csv, 'coastDist$')] >= 0 )
subset <- test1transect[,sort(c(col_of_interest(csv, 'coastDist$'), col_of_interest(csv, 'DATE_ACQUIRED$')))]
if(is.null(nrow(subset))){
df_coastDist[n,] <- rep(NA, length(uniqueDates))
} else {
mathcingDates <- match(colnames(df_coastDist), subset[ ,col_of_interest(subset, 'DATE_ACQUIRED')])
df_coastDist[n,mathcingDates[!is.na(c(mathcingDates))]] <- subset[,col_of_interest(subset, 'coastDist$')]
}
#
#
# coordiates of coastline points
coords <- data.frame(x = as.numeric(test1transect[,col_of_interest(csv, 'coastX$')]),
y = as.numeric(test1transect[,col_of_interest(csv, 'coastY$')]))
allPoints <- rbind(allPoints, coords)
}
View(df_coastDist)
df <- SpatialLinesDataFrame(lines_sf,df_coastDist )
lines_sf
class(coastDist)
df_coastDist
data.frame(df_coastDist)
df <- SpatialLinesDataFrame(lines_sf,data.frame(df_coastDist))
lines_sf
class(lines_sf)
lines_sf <- SpatialLines(lines, proj4string=CRS("+proj=longlat +datum=WGS84"))
lines_sf <- st_as_sf(lines_sf)
points_sf <- st_as_sf(points)
df <- SpatialLinesDataFrame(lines_sf,data.frame(df_coastDist))
data.frame(df_coastDist)
lines_sf <- SpatialLines(lines, proj4string=CRS("+proj=longlat +datum=WGS84"))
df <- SpatialLinesDataFrame(lines_sf,data.frame(df_coastDist))
df
lines_sf <- st_as_sf(lines_sf)
lines_sf
mapview(lines_sf,xcol = "x", ycol = "y", popup = popupTable(lines_sf)) + mapview(points_sf)
lines_sf <- st_as_sf(df)
points_sf <- st_as_sf(points)
mapview(lines_sf,xcol = "x", ycol = "y", popup = popupTable(lines_sf)) + mapview(points_sf)
